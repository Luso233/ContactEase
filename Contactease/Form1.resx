<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="profilePictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigkJyct
        MkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVFRUVFRUVF
        RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCAC7ALsDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDyKiiigAqSKIyn2oijMjgVsWlhu2jHHek2NIv6LoJuQsj8R16P
        ZWsOm2IitI8ySLya5vRIyY1jDYjj4ArrU1OGFEiCe2aVzRIpHT5JNpkYg1aXSohGS74+tSNqlupLcEiu
        c1HX3mdsHJouUjX8u3j3c7zVVnjBrCg1KVeH5BNRXms5cQRLmVzxTTC5oajepGBGmC7VWtrNyN0nerGl
        6I+fOuMvIa3009sD5TQJswRaLHzs5qAzkSsp4weK6Y6ax7Gua1m3MFyDUsLluC4DcHrVlax4mOAQa1IJ
        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
        5f3vz4J61iP99vrTEf/Z
</value>
  </data>
</root>